import asyncio
import datetime
import logging
from typing import List
from telegram import Bot
from telegram.error import TelegramError
from database import Database
from payment_system import YooKassaPayment, MockPaymentSystem, RobokassaPayment

class SubscriptionManager:
    def __init__(self, bot: Bot, db: Database, payment_system, paid_channel_id: str):
        self.bot = bot
        self.db = db
        self.payment_system = payment_system
        self.paid_channel_id = paid_channel_id  # ID –ø–ª–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (–±–µ–∑ @)
        self.logger = logging.getLogger(__name__)
    
    async def check_and_process_expired_subscriptions(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
        try:
            expired_subscriptions = self.db.get_expired_subscriptions()
            
            for subscription in expired_subscriptions:
                user_id = subscription['user_id']
                
                # –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞
                success = await self._try_auto_payment(user_id)
                
                if not success:
                    # –ï—Å–ª–∏ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –Ω–µ—É–¥–∞—á–µ–Ω, —É–¥–∞–ª—è–µ–º –∏–∑ –∫–∞–Ω–∞–ª–∞
                    await self._remove_user_from_channel(user_id)
                    await self._notify_user_subscription_expired(user_id)
                    
                    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –ë–î
                    self.db.deactivate_subscription(user_id)
                    
                    self.logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏—Å—Ç–µ–∫–ª–∞ –∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
                else:
                    self.logger.info(f"–ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–µ–Ω")
        
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
    
    async def _try_auto_payment(self, user_id: int) -> bool:
        """–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
            
            if isinstance(self.payment_system, YooKassaPayment):
                # –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –ÆKassa –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å payment_method_id –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –æ–ø–ª–∞—Ç—ã
                # payment_method_id = self._get_saved_payment_method(user_id)
                # if payment_method_id:
                #     result = self.payment_system.charge_saved_payment_method(
                #         payment_method_id, 100000, user_id
                #     )
                #     return result and result.get('status') == 'succeeded'
                return False  # –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
            
            elif isinstance(self.payment_system, RobokassaPayment):
                # –î–ª—è –†–æ–±–æ–∫–∞—Å—Å—ã —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ —Ç—Ä–µ–±—É—é—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ "–†–æ–±–æ–∫–∞—Å—Å–∞ –†–µ–∫—É—Ä—Ä–µ–Ω—Ç"
                # payment_method_id = self._get_saved_payment_method(user_id)
                # if payment_method_id:
                #     result = self.payment_system.charge_saved_payment_method(
                #         payment_method_id, 100000, user_id
                #     )
                #     return result and result.get('status') == 'succeeded'
                return False  # –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
            
            elif isinstance(self.payment_system, MockPaymentSystem):
                # –ò–º–∏—Ç–∞—Ü–∏—è –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞
                payment = self.payment_system.create_payment(100000, "–ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂", user_id)
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                self.payment_system.simulate_successful_payment(payment['id'])
                return True
            
            return False
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    async def _remove_user_from_channel(self, user_id: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–ª–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        try:
            await self.bot.ban_chat_member(
                chat_id=self.paid_channel_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –Ω–∞–ø—Ä—è–º—É—é
                user_id=user_id
            )
            # –°—Ä–∞–∑—É —Ä–∞–∑–±–∞–Ω–∏–≤–∞–µ–º, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ —Å–Ω–æ–≤–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
            await self.bot.unban_chat_member(
                chat_id=self.paid_channel_id,
                user_id=user_id
            )
            self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞")
            
        except TelegramError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑ –∫–∞–Ω–∞–ª–∞: {e}")
    
    async def _notify_user_subscription_expired(self, user_id: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            message = """üîî –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –∏—Å—Ç–µ–∫–ª–∞!
            
–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.

–ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É."""
            
            await self.bot.send_message(chat_id=user_id, text=message)
            
        except TelegramError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    async def add_user_to_channel(self, user_id: int) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–ª–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            invite_link = await self.bot.create_chat_invite_link(
                chat_id=self.paid_channel_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –Ω–∞–ø—Ä—è–º—É—é
                member_limit=1,  # –¢–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                expire_date=datetime.datetime.now() + datetime.timedelta(hours=1)  # –î–µ–π—Å—Ç–≤—É–µ—Ç —á–∞—Å
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await self.bot.send_message(
                chat_id=user_id,
                text=f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.\n\n"
                     f"–í–æ—Ç –≤–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É:\n"
                     f"{invite_link.invite_link}\n\n"
                     f"‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç 1 —á–∞—Å –∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—Å."
            )
            
            return True
            
        except TelegramError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –∫–∞–Ω–∞–ª: {e}")
            return False
    
    async def notify_subscription_expiring_soon(self, days_before: int = 3):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç —á–µ—Ä–µ–∑ N –¥–Ω–µ–π
            future_date = datetime.datetime.now() + datetime.timedelta(days=days_before)
            
            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –≤ Database –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ –¥–∞—Ç–µ
            # expiring_soon = self.db.get_subscriptions_expiring_before(future_date)
            
            # for subscription in expiring_soon:
            #     await self._notify_user_subscription_expiring(subscription['user_id'], days_before)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏: {e}")
    
    async def _notify_user_subscription_expiring(self, user_id: int, days_left: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏"""
        try:
            message = f"""‚è∞ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω—è!
            
–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É.

–ü—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."""
            
            await self.bot.send_message(chat_id=user_id, text=message)
            
        except TelegramError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def run_subscription_checker(subscription_manager: SubscriptionManager):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫"""
    while True:
        try:
            await subscription_manager.check_and_process_expired_subscriptions()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
            await asyncio.sleep(3600)
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
            await asyncio.sleep(300)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 5 –º–∏–Ω—É—Ç
