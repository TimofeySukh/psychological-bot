import asyncio
import logging
import os
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv

from database import Database
from payment_system import MockPaymentSystem, YooKassaPayment, RobokassaPayment
from subscription_manager import SubscriptionManager, run_subscription_checker

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏–∑ .env
BOT_TOKEN = os.getenv('BOT_TOKEN')
FREE_CHANNEL_LINK = os.getenv('FREE_CHANNEL_LINK')
PAID_CHANNEL_LINK = os.getenv('PAID_CHANNEL_LINK')
PAID_CHANNEL_ID = os.getenv('PAID_CHANNEL_ID')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∏–∑ .env
USE_REAL_PAYMENTS = os.getenv('USE_REAL_PAYMENTS', 'False').lower() == 'true'
PAYMENT_PROVIDER = os.getenv('PAYMENT_PROVIDER', 'mock')

# –†–æ–±–æ–∫–∞—Å—Å–∞
ROBOKASSA_MERCHANT_LOGIN = os.getenv('ROBOKASSA_MERCHANT_LOGIN')
ROBOKASSA_PASSWORD1 = os.getenv('ROBOKASSA_PASSWORD1')
ROBOKASSA_PASSWORD2 = os.getenv('ROBOKASSA_PASSWORD2')
ROBOKASSA_TEST_MODE = os.getenv('ROBOKASSA_TEST_MODE', 'True').lower() == 'true'

# –ÆKassa
YOOKASSA_SHOP_ID = os.getenv('YOOKASSA_SHOP_ID')
YOOKASSA_SECRET_KEY = os.getenv('YOOKASSA_SECRET_KEY')

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DATABASE_PATH = os.getenv('DATABASE_PATH', 'bot_database.db')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
db = Database(DATABASE_PATH)

if USE_REAL_PAYMENTS:
    if PAYMENT_PROVIDER == "robokassa":
        payment_system = RobokassaPayment(
            ROBOKASSA_MERCHANT_LOGIN, 
            ROBOKASSA_PASSWORD1, 
            ROBOKASSA_PASSWORD2,
            ROBOKASSA_TEST_MODE
        )
    elif PAYMENT_PROVIDER == "yookassa":
        payment_system = YooKassaPayment(YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY)
    else:
        payment_system = MockPaymentSystem()
else:
    payment_system = MockPaymentSystem()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –¢–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
WELCOME_TEXT = """–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –û–ª—å–≥–∞ –°—É—Ö–æ–≤–∞ –∏ –º–æ–π –±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —è –±–ª–∞–≥–æ–¥–∞—Ä—é —Ç–µ–±—è –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –º–æ–µ–º—É –∫–∞–Ω–∞–ª—É –∏ –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤–æ –≤—Å—ë–º, —á—Ç–æ –∫–∞—Å–∞–µ—Ç—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—é –∫ –∫–∞–Ω–∞–ª—É –∏ —Ç–≤–æ–µ–º—É –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–º—É –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—é –≤ –Ω—ë–º."""

ABOUT_CHANNEL_TEXT = """–ú–æ–π –∫–∞–Ω–∞–ª ‚Äî –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –ø—Ä—è—á–µ—Ç—Å—è –∑–∞ –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—è–º–∏ –∏ –Ω–µ —Å–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Å—ë –ø–æ–¥—Ä—è–¥ –Ω–∞ ¬´–ø–ª–æ—Ö–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ¬ª, –∞ —Ö–æ—á–µ—Ç –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ –∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ –ø–æ–¥–æ–π—Ç–∏ –∫ —Å–≤–æ–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é ‚Äî –∏ —Ç–µ–ª–µ—Å–Ω–æ–º—É, –∏ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–º—É."""

PHILOSOPHY_TEXT = """–ú–æ—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è –ø—Ä–æ—Å—Ç–∞: —Ç–µ–ª–æ –∏ –≥–æ–ª–æ–≤–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ —Å–≤—è–∑–∫–µ, –∏ –ª–µ—á–∏—Ç—å –æ–¥–Ω–æ –±–µ–∑ –¥—Ä—É–≥–æ–≥–æ ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ —á—Ç–æ —á–∏–Ω–∏—Ç—å –∫—Ä—ã—à—É, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –¥—ã—Ä—è–≤—ã–π —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç.

–í—Å—ë, –æ —á—ë–º —è —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—é, –æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –º–æ—ë–º –ª–∏—á–Ω–æ–º –æ–ø—ã—Ç–µ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∑–Ω–∞–Ω–∏—è—Ö. –ù–æ –≤–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å: –º–æ–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ –∑–∞–º–µ–Ω—è—é—Ç –≤—Ä–∞—á–µ–π, –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏—é –∏–ª–∏ —Å–ø–æ—Ä—Ç, –∞ –≤–µ–¥—É—Ç –∏ –Ω–∞–ø—Ä–∞–≤–ª—è—é—Ç –∫ —Å–µ–±–µ –∏ —Å–≤–æ–µ–º—É –ø—É—Ç–∏."""

WHAT_I_GIVE_TEXT = """–Ø —Ö–æ—á—É –≤–∞–º –¥–∞—Ç—å –º–µ—Å—Ç–æ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∞–ø–≥—Ä–µ–π–¥–∞, —á–µ—Ä–µ–∑ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–≤–æ–µ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ‚Äî –±–µ–∑ –≥–æ–Ω–∫–∏ –∑–∞ —á—É–∂–∏–º ¬´—É—Å–ø–µ—à–Ω—ã–º —É—Å–ø–µ—Ö–æ–º¬ª –∏ –±–µ–∑ –∑–∞–≤—ã—à–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ —Å–µ–±–µ, –Ω–æ –∏ –±–µ–∑ —Ç–∏—Ö–æ–≥–æ –±–æ–ª–æ—Ç–∞, –≥–¥–µ ¬´–ø—Ä–∏–Ω—è—Ç–∏–µ —Å–µ–±—è¬ª —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø–æ–≤–æ–¥–æ–º –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å."""

CHANNEL_CONTENT_TEXT = """–ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü –º—ã —Ä–∞–∑–±–∏—Ä–∞–µ–º –æ–¥–Ω—É —Ç–µ–º—É ‚Äî –æ –∑–¥–æ—Ä–æ–≤—å–µ, –ø—Å–∏—Ö–∏–∫–µ –∏–ª–∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Ä–æ–ª—è—Ö.
–í–∞—Å –∂–¥—ë—Ç:
- 5‚Äì7 –ø–æ—Å—Ç–æ–≤ –≤ –º–µ—Å—è—Ü
- –ø–æ–¥—Ä–æ–±–Ω—ã–π –≥–∞–π–¥ –ø–æ —Ç–µ–º–µ
- –ø–æ–ª–µ–∑–Ω—ã–µ –ª–∞–π—Ñ—Ö–∞–∫–∏
- –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è"""

SUBSCRIPTION_INFO_TEXT = """üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 1 000 ‚ÇΩ –≤ –º–µ—Å—è—Ü
üìÖ –°–ø–∏—Å–∞–Ω–∏—è: —Ä–∞–∑ –≤ –º–µ—Å—è—Ü —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã, –ø—Ä–æ–¥–ª–µ–Ω–∏–µ ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ.
üõ† –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã: –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª.
‚ùå –û—Ç–º–µ–Ω–∞: –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /subscription.
üåç –û–ø–ª–∞—Ç–∞ –∏–∑-–∑–∞ —Ä—É–±–µ–∂–∞: –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Å–ª—É–∂–±—É –∑–∞–±–æ—Ç—ã ‚Äî –ø–æ–º–æ–∂–µ–º –æ–ø–ª–∞—Ç–∏—Ç—å —Å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã."""

DOCUMENTS_TEXT = """–û—Å—Ç–∞–ª–∞—Å—å –ø–æ—Å–ª–µ–¥–Ω—è—è —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å!

–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è –æ—Ñ–µ—Ä—Ç—ã, –ø–æ–ª–∏—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫—É.

1. –î–æ–≥–æ–≤–æ—Ä –æ—Ñ–µ—Ä—Ç—ã
2. –ü–æ–ª–∏—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
3. –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    db.add_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ —á—Ç–æ –º–æ–π –∫–∞–Ω–∞–ª", callback_data="about_channel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(WELCOME_TEXT, reply_markup=reply_markup)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    await query.answer()

    if query.data == "about_channel":
        keyboard = [
            [InlineKeyboardButton("–ê —á—Ç–æ –µ—â—ë?", callback_data="philosophy")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(text=ABOUT_CHANNEL_TEXT, reply_markup=reply_markup)
    
    elif query.data == "philosophy":
        keyboard = [
            [InlineKeyboardButton("–ß—Ç–æ —Ö–æ—á—É –≤–∞–º –¥–∞—Ç—å?", callback_data="what_i_give")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(text=PHILOSOPHY_TEXT, reply_markup=reply_markup)
    
    elif query.data == "what_i_give":
        keyboard = [
            [InlineKeyboardButton("–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏ –∫–∞–Ω–∞–ª–∞?", callback_data="channel_content")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(text=WHAT_I_GIVE_TEXT, reply_markup=reply_markup)
    
    elif query.data == "channel_content":
        keyboard = [
            [InlineKeyboardButton("–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?", callback_data="subscription_info")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(text=CHANNEL_CONTENT_TEXT, reply_markup=reply_markup)
    
    elif query.data == "subscription_info":
        keyboard = [
            [InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="documents")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(text=SUBSCRIPTION_INFO_TEXT, reply_markup=reply_markup)
    
    elif query.data == "documents":
        keyboard = [
            [InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç–æ", callback_data="accepted")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(text=DOCUMENTS_TEXT, reply_markup=reply_markup)
    
    elif query.data == "accepted":
        keyboard = [
            [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="payment")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(text="–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ.", reply_markup=reply_markup)
    
    elif query.data == "payment":
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        subscription = db.get_user_subscription(user_id)
        if subscription:
            await query.message.reply_text(
                text="‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞! "
                     f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription['end_date']}"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        payment = payment_system.create_payment(
            amount=100000,  # 1000 —Ä—É–±–ª–µ–π –≤ –∫–æ–ø–µ–π–∫–∞—Ö
            description="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –û–ª—å–≥–∏ –°—É—Ö–æ–≤–æ–π",
            user_id=user_id
        )
        
        if payment:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –ë–î
            db.add_payment(
                user_id=user_id,
                payment_id=payment['id'],
                amount=100000,
                status='pending'
            )
            
            if USE_REAL_PAYMENTS:
                # –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
                payment_url = payment['confirmation']['confirmation_url']
                keyboard = [
                    [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
                    [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment_{payment['id']}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.message.reply_text(
                    text="üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n\n"
                         "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'.",
                    reply_markup=reply_markup
                )
            else:
                # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–º–µ—á–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π
                payment_system.simulate_successful_payment(payment['id'])
                await process_successful_payment(payment['id'], query)
        else:
            await query.message.reply_text(
                text="‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
    
    elif query.data.startswith("check_payment_"):
        payment_id = query.data.replace("check_payment_", "")
        await check_payment_status(payment_id, query)
    
    elif query.data == "cancel_subscription":
        user_id = query.from_user.id
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        db.deactivate_subscription(user_id)
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∫–∞–Ω–∞–ª–∞
        try:
            bot = query.bot
            subscription_manager = SubscriptionManager(bot, db, payment_system, PAID_CHANNEL_ID)
            await subscription_manager._remove_user_from_channel(user_id)
            
            await query.message.reply_text(
                text="‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.\n\n"
                     "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è, –Ω–∞–∂–∞–≤ /start"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            await query.message.reply_text(
                text="‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
            )
    
    else:
        await query.message.reply_text(text=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {query.data}")

async def check_payment_status(payment_id: str, query):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    payment_info = payment_system.check_payment_status(payment_id)
    
    if payment_info and payment_info.get('status') == 'succeeded':
        await process_successful_payment(payment_id, query)
    else:
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"check_payment_{payment_id}")],
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="payment")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.reply_text(
            text="‚è≥ –û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
            reply_markup=reply_markup
        )

async def process_successful_payment(payment_id: str, query):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
    user_id = query.from_user.id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î
    db.update_payment_status(payment_id, 'paid')
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    db.create_subscription(user_id, payment_id, 100000)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª (–µ—Å–ª–∏ subscription_manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω)
    try:
        bot = query.bot
        subscription_manager = SubscriptionManager(bot, db, payment_system, PAID_CHANNEL_ID)
        success = await subscription_manager.add_user_to_channel(user_id)
        
        if success:
            await query.message.reply_text(
                text="üéâ –û—Ç–ª–∏—á–Ω–æ! –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.\n\n"
                     "–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É. "
                     "–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º.\n\n"
                     "–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscription"
            )
        else:
            await query.message.reply_text(
                text="‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –∫–∞–Ω–∞–ª. "
                     "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã: {e}")
        await query.message.reply_text(
            text="‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –°–∫–æ—Ä–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É."
        )

async def subscription_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π"""
    user_id = update.effective_user.id
    subscription = db.get_user_subscription(user_id)
    
    if subscription:
        keyboard = [
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="cancel_subscription")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            text=f"üìã –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞:\n\n"
                 f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if subscription['is_active'] else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n"
                 f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription['end_date']}\n"
                 f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {subscription['amount'] / 100} ‚ÇΩ\n\n"
                 f"–ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –≤–∫–ª—é—á–µ–Ω. –ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–∞.",
            reply_markup=reply_markup
        )
    else:
        keyboard = [
            [InlineKeyboardButton("üõí –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="about_channel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
                 "–•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª?",
            reply_markup=reply_markup
        )

async def get_chat_id_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chat_id –∫–∞–Ω–∞–ª–æ–≤"""
    try:
        chat_id = update.effective_chat.id
        chat_type = update.effective_chat.type
        chat_title = getattr(update.effective_chat, 'title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        user_name = update.effective_user.first_name if update.effective_user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        
        message = f"üÜî **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:**\n\n"
        message += f"üì± Chat ID: `{chat_id}`\n"
        message += f"üìã –¢–∏–ø —á–∞—Ç–∞: {chat_type}\n"
        message += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {chat_title}\n"
        message += f"üë§ –ó–∞–ø—Ä–æ—Å–∏–ª: {user_name}\n\n"
        
        if chat_type == "private":
            message += "üìù **–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –∫–∞–Ω–∞–ª–∞:**\n"
            message += "1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≤–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            message += "2Ô∏è‚É£ –î–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞: '–ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' –∏ '–ë–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'\n"
            message += "3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É `/get_chat_id` –≤ –∫–∞–Ω–∞–ª–µ\n"
            message += "4Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π Chat ID\n"
            message += "5Ô∏è‚É£ –í—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PAID_CHANNEL_ID –≤ main.py"
        elif chat_type in ["group", "supergroup"]:
            message += "‚úÖ **–≠—Ç–æ –≥—Ä—É–ø–ø–∞!**\n"
            message += f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç Chat ID: `{chat_id}`"
        elif chat_type == "channel":
            message += "üéØ **–≠—Ç–æ –∫–∞–Ω–∞–ª!**\n"
            message += f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç Chat ID: `{chat_id}`\n"
            message += "‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞!"
        else:
            message += f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —á–∞—Ç–∞: {chat_type}"
        
        await update.message.reply_text(message, parse_mode='Markdown')
        
        # –î—É–±–ª–∏—Ä—É–µ–º –≤ –ª–æ–≥–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
        logging.info(f"Chat ID –∑–∞–ø—Ä–æ—à–µ–Ω: {chat_id}, —Ç–∏–ø: {chat_type}, –Ω–∞–∑–≤–∞–Ω–∏–µ: {chat_title}")
        
    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ:\n`{str(e)}`"
        await update.message.reply_text(error_message, parse_mode='Markdown')
        logging.error(f"–û—à–∏–±–∫–∞ –≤ get_chat_id_command: {e}")

async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    await update.message.reply_text(
        "ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "‚Ä¢ /subscription - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π\n"
        "‚Ä¢ /get_chat_id - –ø–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞\n"
        "‚Ä¢ /test - —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞"
    )

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("subscription", subscription_command))
    application.add_handler(CommandHandler("get_chat_id", get_chat_id_command))  # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    application.add_handler(CommandHandler("test", test_command))  # –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
    application.add_handler(CallbackQueryHandler(button))

    # –°–æ–∑–¥–∞–µ–º subscription_manager –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    bot = application.bot
    subscription_manager = SubscriptionManager(bot, db, payment_system, PAID_CHANNEL_ID)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    async def post_init(application):
        asyncio.create_task(run_subscription_checker(subscription_manager))
    
    application.post_init = post_init
    
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main() 